import { Telegraf } from 'telegraf';
import { prisma } from '../db';
import { isAdmin } from '../utils/isAdmin';

export function setupStartGame(bot: Telegraf) {
  bot.command('start_game', async (ctx) => {
    const telegramId = ctx.from.id;

    if (!isAdmin(telegramId)) {
      return ctx.reply('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—É.');
    }

    const game = await prisma.game.findFirst({
      where: { status: 'WAITING' },
      include: { participants: true },
    });

    if (!game || game.participants.length < 2) {
      return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.');
    }

    const shuffled = [...game.participants].sort(() => Math.random() - 0.5);

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è (–∫–∞–∂–¥–æ–º—É —Å–ª–µ–¥—É—é—â–µ–≥–æ)
    for (let i = 0; i < shuffled.length; i++) {
      const giver = shuffled[i];
      const receiver = shuffled[(i + 1) % shuffled.length];

      await prisma.participant.update({
        where: { id: receiver.id },
        data: {
          receivedTask: giver.taskText,
          assignedToId: giver.id,
        },
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
    await prisma.game.update({
      where: { id: game.id },
      data: { status: 'IN_PROGRESS' },
    });

    ctx.reply('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ó–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç –≤—ã—Å–ª–∞–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–ª—É—á–∞–π–Ω–æ.');

    // –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–¥–∞–Ω–∏–π –≤ —Å–ª—É—á–∞–π–Ω—ã–π –º–æ–º–µ–Ω—Ç (–æ—Ç 1 –¥–æ 5 –º–∏–Ω—É—Ç)
    for (const p of game.participants) {
      const delay = Math.floor(Math.random() * 4 + 1) * 60 * 1000;

      setTimeout(async () => {
        try {
          await bot.telegram.sendMessage(
            Number(p.telegramId),
            `üîç –í–æ—Ç —Ç–≤–æ—ë —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n${p.receivedTask}`
          );

          await prisma.participant.update({
            where: { id: p.id },
            data: { taskSentAt: new Date() },
          });
        } catch (err) {
          console.error(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è ${p.username}`, err);
        }
      }, delay);
    }

    // –ê–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
    setTimeout(async () => {
      const updatedGame = await prisma.game.findUnique({
        where: { id: game.id },
        include: { participants: true },
      });

      if (updatedGame?.status === 'IN_PROGRESS') {
        await prisma.game.update({
          where: { id: game.id },
          data: { status: 'ENDED' },
        });

        const leaderboard = updatedGame.participants
          .sort((a, b) => b.points - a.points)
          .map((p, i) => `${i + 1}. @${p.username} ‚Äî ${p.points} –æ—á–∫–æ–≤`);

        await bot.telegram.sendMessage(
          telegramId,
          `‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ!\n\nüèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n${leaderboard.join('\n')}`
        );
      }
    }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç
  });
}
