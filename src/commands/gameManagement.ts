import { Telegraf, Context } from 'telegraf';
import { prisma } from '../db';

export function setupGameManagement(bot: Telegraf) {
  // 1. –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã
  bot.command('leave_game', async (ctx) => {
    const userId = ctx.from!.id.toString();

    const participant = await prisma.participant.findUnique({
      where: { telegramId: userId },
    });

    if (!participant) return ctx.reply('–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ.');

    await prisma.participant.delete({
      where: { telegramId: userId },
    });

    ctx.reply('üö™ –¢—ã –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã.');
  });

  // 2. –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
  bot.command('delete_game', async (ctx) => {
    const userId = ctx.from!.id.toString();

    const participant = await prisma.participant.findUnique({
      where: { telegramId: userId },
      include: { game: true },
    });

    if (!participant || !participant.isAdmin) {
      return ctx.reply('‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∏–≥—Ä—É.');
    }

    await prisma.participant.deleteMany({
      where: { gameId: participant.gameId },
    });

    await prisma.game.delete({
      where: { id: participant.gameId },
    });

    ctx.reply('üóë –ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞.');
  });
}
