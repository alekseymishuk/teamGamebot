import { Telegraf, Context } from 'telegraf';
import { prisma } from '../db';

export function setupGameManagement(bot: Telegraf) {
  // 1. leave_game
  bot.command('leave_game', async (ctx) => {
    const telegramId = ctx.from!.id.toString();

    const participant = await prisma.participant.findUnique({
      where: { telegramId },
    });

    if (!participant) return ctx.reply('–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ.');

    try {
      // —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–≥–∞–¥–∫–∏
      await prisma.guess.deleteMany({
        where: {
          OR: [
            { guesserId: telegramId },
            { targetId: telegramId },
          ],
        },
      });

      // —É–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
      await prisma.participant.delete({
        where: { telegramId },
      });

      ctx.reply('üö™ –¢—ã –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É. –¢–≤–æ—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', err);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã.');
    }

  });

  // 2. delete_game (only for admin)
  bot.command('delete_game', handleDeleteGame);
}

export const handleDeleteGame = async (ctx: Context) => {
  const userId = ctx.from!.id.toString();

  const participant = await prisma.participant.findUnique({
    where: { telegramId: userId },
    include: { game: true },
  });

  if (!participant || !participant.isAdmin) {
    return ctx.reply('‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∏–≥—Ä—É.');
  }

  await prisma.participant.deleteMany({
    where: { gameId: participant.gameId },
  });

  await prisma.game.delete({
    where: { id: participant.gameId },
  });

  ctx.reply('üóë –ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞.');
};
