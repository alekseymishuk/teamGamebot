// === start.ts ===
import { Telegraf, Context } from 'telegraf';
import { prisma } from '../db';
import { mainMenuKeyboard } from '../ui/mainMenu';
import { Message } from 'telegraf/typings/core/types/typegram';

const waitingForTask = new Set<string>();

export function setupStart(bot: Telegraf) {
  bot.start(async (ctx) => {
    const userId = ctx.from!.id.toString();
    const username = ctx.from!.username || ctx.from!.first_name;
    const code = ctx.startPayload?.trim().toUpperCase();

    if (!code) {
      return ctx.reply('–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:', mainMenuKeyboard);
    }

    const game = await prisma.game.findUnique({ where: { code } });
    if (!game) {
      return ctx.reply('‚õî –ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –∫–æ–¥.');
    }

    const existing = await prisma.participant.findFirst({
      where: {
        telegramId: userId,
        gameId: game.id,
      },
    });

    if (existing) {
      if (!existing.taskText || existing.taskText.trim() === '') {
        waitingForTask.add(userId);
        return ctx.reply(`üëã –¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ —Å –∫–æ–¥–æ–º ${code}, –Ω–æ –µ—â—ë –Ω–µ –≤–≤—ë–ª –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –µ–≥–æ —Å–µ–π—á–∞—Å.`);
      } else {
        return ctx.reply(`üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ –∏–≥—Ä—É —Å –∫–æ–¥–æ–º ${code}!`, mainMenuKeyboard);
      }
    }

    // –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∏–≥—Ä—É
    await prisma.participant.create({
      data: {
        telegramId: userId,
        username,
        taskText: '',
        isAdmin: false,
        gameId: game.id,
      },
    });

    waitingForTask.add(userId);

    ctx.reply(`‚úÖ –¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ —Å –∫–æ–¥–æ–º *${code}*!\n–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫.`, {
      parse_mode: 'Markdown',
    });
  });

  bot.use(async (ctx, next) => {
    const userId = ctx.from?.id.toString();
    const message = ctx.message as Message.TextMessage | undefined;

    if (!message || !userId) return next();

    const text = message.text.trim();

    if (!waitingForTask.has(userId)) return next();

    if (text.startsWith('/')) {
      waitingForTask.delete(userId);
      return next();
    }

    const participant = await prisma.participant.findUnique({ where: { telegramId: userId } });
    if (!participant) return next();

    await prisma.participant.update({
      where: { telegramId: userId },
      data: { taskText: text },
    });

    waitingForTask.delete(userId);
    ctx.reply('üìù –ó–∞–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –û–∂–∏–¥–∞–π –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.', mainMenuKeyboard);
  });
}
