"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleStartGame = void 0;
exports.setupStartGame = setupStartGame;
const db_1 = require("../db");
const handleStartGame = async (ctx) => {
    const userId = ctx.from.id.toString();
    const participant = await db_1.prisma.participant.findUnique({
        where: { telegramId: userId },
        include: { game: true },
    });
    if (!participant || !participant.isAdmin) {
        return ctx.reply('‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É.');
    }
    const gameId = participant.gameId;
    const participants = await db_1.prisma.participant.findMany({
        where: { gameId },
    });
    if (participants.length < 1) {
        return ctx.reply('‚ùó –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞.');
    }
    const notReady = participants.filter(p => !p.taskText || p.taskText.trim() === '');
    if (notReady.length > 0) {
        const list = notReady.map(p => `@${p.username || '–±–µ–∑_–∏–º–µ–Ω–∏'}`).join('\n');
        return ctx.reply(`‚õî –ù–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–≤–µ–ª–∏ –∑–∞–¥–∞–Ω–∏—è:\n${list}`);
    }
    // —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
    const shuffled = [...participants];
    for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    // –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ –∫—Ä—É–≥—É
    for (let i = 0; i < shuffled.length; i++) {
        const from = shuffled[i];
        const to = shuffled[(i + 1) % shuffled.length];
        await db_1.prisma.participant.update({
            where: { telegramId: to.telegramId },
            data: {
                receivedTask: from.taskText,
                taskSentAt: new Date(),
            },
        });
        try {
            await ctx.telegram.sendMessage(to.telegramId, `üéØ –¢–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ: "${from.taskText}"`);
        }
        catch (err) {
            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ @${to.username}:`, err);
        }
    }
    await db_1.prisma.game.update({
        where: { id: gameId },
        data: { status: 'IN_PROGRESS' },
    });
    ctx.reply('üöÄ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ó–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.');
};
exports.handleStartGame = handleStartGame;
function setupStartGame(bot) {
    bot.command('start_game', exports.handleStartGame);
}
