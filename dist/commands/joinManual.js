"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupJoinManual = setupJoinManual;
const db_1 = require("../db");
const waitingForCode = new Set();
function setupJoinManual(bot) {
    bot.command('join_by_code', (ctx) => {
        const userId = ctx.from.id.toString();
        waitingForCode.add(userId);
        ctx.reply('–í–≤–µ–¥–∏ –∫–æ–¥ –∏–≥—Ä—ã, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:');
    });
    // üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.use ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    bot.use(async (ctx, next) => {
        const userId = ctx.from?.id.toString();
        const message = ctx.message;
        if (!message || !message.text || !userId) {
            return next(); // –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        }
        const text = message.text.trim();
        if (!waitingForCode.has(userId))
            return next();
        if (text.startsWith('/')) {
            waitingForCode.delete(userId);
            return next();
        }
        waitingForCode.delete(userId);
        // –î–∞–ª–µ–µ –ª–æ–≥–∏–∫–∞ —Å –∫–æ–¥–æ–º:
        const code = text.toUpperCase();
        const game = await db_1.prisma.game.findUnique({ where: { code } });
        if (!game) {
            return ctx.reply('–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }
        const exists = await db_1.prisma.participant.findUnique({
            where: { telegramId: userId },
        });
        if (exists) {
            return ctx.reply('–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∏–≥—Ä–µ.');
        }
        await db_1.prisma.participant.create({
            data: {
                telegramId: userId,
                username: ctx.from.username || ctx.from.first_name,
                taskText: '',
                gameId: game.id,
            },
        });
        ctx.reply(`‚úÖ –¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ —Å –∫–æ–¥–æ–º *${code}*! –í–≤–µ–¥–∏ —Å–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ.`);
    });
}
