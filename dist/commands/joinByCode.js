"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupJoinByCode = setupJoinByCode;
const db_1 = require("../db");
function setupJoinByCode(bot) {
    bot.start(async (ctx) => {
        const code = ctx.payload;
        const telegramId = ctx.from.id.toString();
        const username = ctx.from.username || ctx.from.first_name;
        console.log('üì¶ Payload:', ctx.payload);
        if (!code) {
            return ctx.reply('–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ, –≤–≤–µ–¥–∏ –∫–æ–¥ –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è.');
        }
        const game = await db_1.prisma.game.findUnique({
            where: { code },
        });
        if (!game) {
            return ctx.reply('–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }
        const existing = await db_1.prisma.participant.findUnique({
            where: { telegramId },
        });
        if (existing) {
            return ctx.reply('–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∏–≥—Ä–µ!');
        }
        await db_1.prisma.participant.create({
            data: {
                telegramId,
                username,
                taskText: '',
                gameId: game.id,
                isAdmin: false,
            },
        });
        ctx.reply(`–¢—ã —Ç–µ–ø–µ—Ä—å –≤ –∏–≥—Ä–µ —Å –∫–æ–¥–æ–º *${code}*!\n–û—Ç–ø—Ä–∞–≤—å –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å.`);
    });
}
